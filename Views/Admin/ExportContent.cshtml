@using Orchard.Core.Contents.ViewModels;
@{
    var typeDisplayName = Model.TypeDisplayName;
    var pageTitle = T("Export Content");

    IEnumerable<string> cultures = Model.Options.Cultures;

    Layout.Title = pageTitle;

    Script.Require("ImportExport.ExportContentAdmin");
}


@using (Html.BeginFormAntiForgeryPost())
{
    <div class="manage">
        <a href="#" class="js-contentexport-select-all">@T("Select all")</a>@T(" | ")<a href="#" class="js-contentexport-select-none">@T("Clear selection")</a>@T(" | ")<button type="submit" name="submit.BulkEdit" value="yes">@T("Export")</button>
    </div>

    <fieldset class="bulk-actions">
        <label for="filterResults" class="bulk-filter">@T("Show")</label>
        <select id="filterResults" name="Options.SelectedFilter">
            @Html.SelectOption((string)Model.Options.SelectedFilter, "", T("any (show all)").ToString())
            @Html.SelectOption((string)Model.Options.SelectedFilter, "--content--", T("content (allows date sorting)").ToString())
            @foreach (var filterOption in Model.Options.FilterOptions)
            {
                @Html.SelectOption((string)Model.Options.SelectedFilter, (string)filterOption.Key, (string)filterOption.Value)
            }
        </select>

        @if (cultures.Count() > 1)
        {
            <label for="filterCultures" class="bulk-culture">@T("Culture")</label>
            <select id="filterCultures" name="Options.SelectedCulture">
                @Html.SelectOption((string)Model.Options.SelectedCulture, "", T("any (show all)").ToString())
                @foreach (string culture in cultures)
                {
                    @Html.SelectOption((string)Model.Options.SelectedCulture, culture, System.Globalization.CultureInfo.GetCultureInfo(culture).DisplayName)
                }
            </select>
        }

        @if (Model.HasCommonPartOrdering)
        {
            <label for="orderResults" class="bulk-order">@T("Ordered by")</label>
            <select id="orderResults" name="Options.OrderBy">
                @Html.SelectOption((ContentsOrder)Model.Options.OrderBy, ContentsOrder.Created, T("recently created").ToString())
                @Html.SelectOption((ContentsOrder)Model.Options.OrderBy, ContentsOrder.Modified, T("recently modified").ToString())
                @Html.SelectOption((ContentsOrder)Model.Options.OrderBy, ContentsOrder.Published, T("recently published").ToString())
            </select>
        }
        <label for="contentResults" class="bulk-order">@T("Filter by")</label>
        <select id="contentResults" name="Options.ContentsStatus">
            @Html.SelectOption((ContentsStatus)Model.Options.ContentsStatus, ContentsStatus.Latest, T("latest").ToString())
            @Html.SelectOption((ContentsStatus)Model.Options.ContentsStatus, ContentsStatus.Published, T("published").ToString())
            @Html.SelectOption((ContentsStatus)Model.Options.ContentsStatus, ContentsStatus.Draft, T("unpublished").ToString())
            @Html.SelectOption((ContentsStatus)Model.Options.ContentsStatus, ContentsStatus.AllVersions, T("all versions").ToString())
        </select>
        <button type="submit" name="submit.Filter" value="yes please">@T("Apply")</button>
    </fieldset>
    <fieldset class="contentItems bulk-items">
        @Display(Model.ContentItems)
    </fieldset>
    @Display(Model.Pager)
}